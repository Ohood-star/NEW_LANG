/* Generated By:JavaCC: Do not edit this line. MyNewGrammarConstants.java */
package black_candy;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface MyNewGrammarConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int spaces = 1;
  /** RegularExpression Id. */
  int Comment = 5;
  /** RegularExpression Id. */
  int PLUS = 6;
  /** RegularExpression Id. */
  int MINUS = 7;
  /** RegularExpression Id. */
  int MULTIPLY = 8;
  /** RegularExpression Id. */
  int DIVIDE = 9;
  /** RegularExpression Id. */
  int EQUALS = 10;
  /** RegularExpression Id. */
  int NOT_EQUALS = 11;
  /** RegularExpression Id. */
  int GRATER_THAN = 12;
  /** RegularExpression Id. */
  int LESS_THAN = 13;
  /** RegularExpression Id. */
  int OR = 14;
  /** RegularExpression Id. */
  int AND = 15;
  /** RegularExpression Id. */
  int Alphabet = 16;
  /** RegularExpression Id. */
  int DIGIT = 17;
  /** RegularExpression Id. */
  int OZ = 18;
  /** RegularExpression Id. */
  int ID = 19;
  /** RegularExpression Id. */
  int COLON = 20;
  /** RegularExpression Id. */
  int UPCOLON = 21;
  /** RegularExpression Id. */
  int DOT = 22;
  /** RegularExpression Id. */
  int DOTS = 23;
  /** RegularExpression Id. */
  int HASH = 24;
  /** RegularExpression Id. */
  int VER = 25;
  /** RegularExpression Id. */
  int EX = 26;
  /** RegularExpression Id. */
  int AT = 27;
  /** RegularExpression Id. */
  int ASSIGN = 28;
  /** RegularExpression Id. */
  int DOUBLE = 29;
  /** RegularExpression Id. */
  int INT = 30;
  /** RegularExpression Id. */
  int ARRAY = 31;
  /** RegularExpression Id. */
  int num = 32;
  /** RegularExpression Id. */
  int NUM = 33;
  /** RegularExpression Id. */
  int SEN = 34;
  /** RegularExpression Id. */
  int MAIN = 35;
  /** RegularExpression Id. */
  int WRITE = 36;
  /** RegularExpression Id. */
  int CON = 37;
  /** RegularExpression Id. */
  int word = 38;
  /** RegularExpression Id. */
  int WORD = 39;
  /** RegularExpression Id. */
  int STRING = 40;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\r\"",
    "\"\\t\"",
    "\"\\n\"",
    "<Comment>",
    "\"&\"",
    "\"*&\"",
    "\"X\"",
    "\"*X\"",
    "\"~~\"",
    "\"*~~\"",
    "\"~*\"",
    "\"*~\"",
    "\"v\"",
    "\"^\"",
    "<Alphabet>",
    "<DIGIT>",
    "<OZ>",
    "<ID>",
    "\",\"",
    "\"\\\'\"",
    "\".\"",
    "\":\"",
    "\"#\"",
    "\"||\"",
    "\"!\"",
    "\"@\"",
    "\"->\"",
    "<DOUBLE>",
    "<INT>",
    "\"Array\"",
    "\"num\"",
    "\"NUM\"",
    "\"sen\"",
    "\"main\"",
    "\"write\"",
    "\"CON\"",
    "\"word\"",
    "<WORD>",
    "<STRING>",
  };

}
